param MIN_TEMP = 0;
param MAX_TEMP = 120;
param STRESS_INCR = 0.1;
param LOW = 0;
param HALF = 1;
param FULL = 2;
param OK = 0;
param HOT = 1;
param INITIAL_TEMP = 95.0;

/*type speed_value = LOW|HALF|FULL;
type warning_value = OK|HOT;*/

variables {
  real p1 range [MIN_TEMP, MAX_TEMP] = INITIAL_TEMP;
  real p2 range [MIN_TEMP, MAX_TEMP] = INITIAL_TEMP;
  real p3 range [MIN_TEMP, MAX_TEMP] = INITIAL_TEMP;
  real p4 range [MIN_TEMP, MAX_TEMP] = INITIAL_TEMP;
  real p5 range [MIN_TEMP, MAX_TEMP] = INITIAL_TEMP;
  real p6 range [MIN_TEMP, MAX_TEMP] = INITIAL_TEMP;
  real stress range [0,1] = 0.0;
  real temp range [MIN_TEMP, MAX_TEMP] = INITIAL_TEMP;
  bool cool = false;
  int speed = HALF;
}


function temperatureUpdateInOneStep(bool cool, int speed) {
  if (cool) {
    return R[-1.2, -0.8];
  } else {
    if (speed == LOW ){
      return R[0.1, 0.3];
    } else {
      if (speed == HALF) {
        return R[0.3, 0.7];
      } else {
        return R[0.7, 1.2];
      }
    }
  }
}

function partialStress (real a){
  if (a>100) {
    return 1.0;
  } else {
    return 0.0;
  }
}

function isStressed(real a1, real a2, real a3, real a4, real a5, real a6) {
  return partialStress(a1) + partialStress(a2) + partialStress(a3) + partialStress(a4) + partialStress(a5) + partialStress(a6);
}

component Engine{
    variables{
        real ch_temp range [MIN_TEMP, MAX_TEMP] = INITIAL_TEMP;
        int ch_wrn = OK;
        int ch_speed = HALF;
        int ch_out = HALF;
        int ch_in = HALF;
    }
    controller {
        state Ctrl {
            if (ch_temp >= 99.8) {
                cool' = true;
                step Cooling;
            } else {
            exec Check;
            }
        }
        state Check {
            if (ch_speed == LOW) {
                speed' = LOW;
                cool' = false;
                step Ctrl;
            } else {
                speed' = ch_in;
                cool' = false;
                step Ctrl;
            }
        }
        state Cooling {
            4#step Check;
        }
        state IDS {
            if (temp>101.0 & !cool) {
                ch_wrn' = HOT;
                ch_speed' = LOW;
                ch_out' = FULL;
                step IDS;
            } else {
                ch_wrn' = OK;
                ch_speed' = HALF;
                ch_out' = HALF;
                step IDS;
            }
        }
    }
    init Ctrl || IDS
}

environment {
  let
    deltaTemp = temperatureUpdateInOneStep(cool, speed)
  in
    temp' = temp + deltaTemp;
    ch_temp' = ch_temp + deltaTemp;
    p1' = temp;
    p2' = p1;
    p3' = p2;
    p4' = p3;
    p5' = p4;
    p6' = p5;
    if (isStressed(p1,p2,p3,p4,p5,p6) > 3) {
      stress' = stress + STRESS_INCR;
    }
}

