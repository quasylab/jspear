param ACCELERATION = 0.1;
param BRAKE = 0.3;
param NEUTRAL = 0.0;
param TIMER_INIT = 4;
param DANGER = 1;
param OK = 0;
param MAX_SPEED_OFFSET = 0.065;
param INIT_SPEED = 30.0;
param MAX_SPEED = 40.0;
param INIT_DISTANCE = 3000.0;
param MAX_DISTANCE = 3000.0;
param SAFETY_DISTANCE = 200.0;

type acc_type = A|N|B;
type accel_type = ACCEL|NEUTRAL|BRAKE

variables{
real p_speed [0,MAX_SPEED];
real s_speed [0,MAX_SPEED];
real p_distance [0,MAX_DISTANCE];
real s_distance [0,MAX_DISTANCE];
acc_type acc;
accel_type accel;
}







function temperatureUpdateInOneStep(bool cool, speed_value speed) {
  if (cool) {
    return U[-1.2, -0.8];
  } else {
    switch speed {
      case SLOW: return U[0.1, 0.3];
      case HALF: return U[0.3, 0.7];
      case FULL: return U[0.7, 1.2];
    }
  }
}

function isStressed(array P) {
  return P.count(it > 100)>3;
}

environment {
  let deltaTemp = temperatureUpdateInOneStep(cool, speed)
  in
    temp' = temp + deltaTemp;
    ch_temp' = ch_temp + deltaTemp;
    P'[2..6] = P[1..5];
    P'[1] = temp;
    when isStressed(P) stress' = stress + STRESS_INCR;
}

controller {
  state Ctrl {
    if (ch_temp >= 99.8) {
      cool' = true;
      step Cooling;
    } else {
      exec Check;
    }
  }
  state Check {
    if (ch_speed == SLOW) {
      speed' = SLOW;
      cool' = false;
      step Ctrl;
    } else {
      speed' = ch_in;
      cool' = false;
      step Ctrl;
    }
  }
  state Cooling {
    4#step Check;
  }
  state IDS {
    if (temp>101.0)&(cool=OFF) {
      ch_wrn' = HOT;
      ch_speed' = LOW;
      ch_out' = FULL;
      step IDS;
    } else {
      ch_wrn' = OK;
      ch_speed' = HALF;
      ch_out' = HALF;
      step IDS;
    }
  }
  state ENG = Ctrl || IDS;
}


